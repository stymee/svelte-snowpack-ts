import './App.svelte.css.proxy.js';
/* src\App.svelte generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { Router, Route } from "../_snowpack/pkg/svelte-routing.js";
import dayjs from "../_snowpack/pkg/dayjs.js";
import { onMount } from "../_snowpack/pkg/svelte.js";
import Nav from "./components/Nav.svelte.js";
import Test1 from "./components/Test1.svelte.js";
import Home from "./components/Home.svelte.js";

function create_default_slot(ctx) {
	let div;
	let nav;
	let t0;
	let header;
	let img;
	let img_src_value;
	let t1;
	let p0;
	let t5;
	let p1;
	let t6;
	let code1;
	let t7;
	let t8;
	let t9;
	let p2;
	let t11;
	let route0;
	let t12;
	let route1;
	let current;
	nav = new Nav({});

	route0 = new Route({
			props: { path: "test", component: Test1 }
		});

	route1 = new Route({ props: { path: "/", component: Home } });

	return {
		c() {
			div = element("div");
			create_component(nav.$$.fragment);
			t0 = space();
			header = element("header");
			img = element("img");
			t1 = space();
			p0 = element("p");
			p0.innerHTML = `Edit <code class="svelte-umxc3p">src/App.svelte</code> and save to reload.`;
			t5 = space();
			p1 = element("p");
			t6 = text("Page has been open for ");
			code1 = element("code");
			t7 = text(/*count*/ ctx[0]);
			t8 = text(" seconds.");
			t9 = space();
			p2 = element("p");
			p2.innerHTML = `<a class="App-link svelte-umxc3p" href="https://svelte.dev" target="_blank" rel="noopener noreferrer">Learn Svelte 12345</a>`;
			t11 = space();
			create_component(route0.$$.fragment);
			t12 = space();
			create_component(route1.$$.fragment);
			if (img.src !== (img_src_value = "logo.svg")) attr(img, "src", img_src_value);
			attr(img, "class", "App-logo svelte-umxc3p");
			attr(img, "alt", "logo");
			attr(p0, "class", "svelte-umxc3p");
			attr(code1, "class", "svelte-umxc3p");
			attr(p1, "class", "svelte-umxc3p");
			attr(p2, "class", "svelte-umxc3p");
			attr(header, "class", "App-header svelte-umxc3p");
			attr(div, "class", "App svelte-umxc3p");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(nav, div, null);
			append(div, t0);
			append(div, header);
			append(header, img);
			append(header, t1);
			append(header, p0);
			append(header, t5);
			append(header, p1);
			append(p1, t6);
			append(p1, code1);
			append(code1, t7);
			append(p1, t8);
			append(header, t9);
			append(header, p2);
			append(header, t11);
			mount_component(route0, header, null);
			append(header, t12);
			mount_component(route1, header, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*count*/ 1) set_data(t7, /*count*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(nav);
			destroy_component(route0);
			destroy_component(route1);
		}
	};
}

function create_fragment(ctx) {
	let router;
	let current;

	router = new Router({
			props: {
				url,
				basepath,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const router_changes = {};

			if (dirty & /*$$scope, count*/ 5) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

const url = "";
const basepath = "/snowpack";

function instance($$self, $$props, $$invalidate) {
	let count = 0;
	let nowTime = "";

	onMount(() => {
		const interval = setInterval(
			() => {
				$$invalidate(0, count++, count);
				nowTime = dayjs(Date.now()).format("ddd M/D/YY h:mm:ss a");
			},
			1000
		);

		return () => {
			clearInterval(interval);
		};
	});

	return [count];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;